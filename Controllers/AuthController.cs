using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using DnsClient;
using vjp_api.Models;
using MailKit.Net.Smtp;
using Microsoft.AspNetCore.Authorization;
using MimeKit;
using System.Security.Cryptography;

using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.EntityFrameworkCore;
using vjp_api.Data;

namespace vjp_api.Controllers
{
    [Route("api/auth")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly UserManager<User> _userManager;
        private readonly SignInManager<User> _signInManager;
        private readonly IConfiguration _configuration;
        private readonly IMemoryCache _cache;
        private readonly ApplicationDbContext _context;

        public AuthController(UserManager<User> userManager, SignInManager<User> signInManager, IConfiguration configuration, IMemoryCache cache, ApplicationDbContext context)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _configuration = configuration;
            _cache = cache;
            _context = context;
        }

        // üîπ ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterModel model, [FromServices] IEmailSender emailSender)
        {
            if (!ModelState.IsValid) 
                return BadRequest(ModelState);

            Console.WriteLine($"üìß Ki·ªÉm tra ƒëƒÉng k√Ω v·ªõi email: {model.Email}");

            // Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
            if (!await IsValidEmailAsync(model.Email))
            {
                return BadRequest(new { message = "Email kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i!" });
            }

            // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            var existingUser = await _userManager.FindByEmailAsync(model.Email);
            if (existingUser != null)
            {
                return BadRequest(new { message = "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
            }

            // T·∫°o token x√°c nh·∫≠n email
            string token = Guid.NewGuid().ToString();
            string key = $"pending_registration:{model.Email}";

            // L∆∞u v√†o Redis (Ch·ªâ l∆∞u trong 30 ph√∫t)
            var cacheData = new
            {
                FullName = model.FullName,
                Email = model.Email,
                Password = model.Password,
                Token = token
            };

            _cache.Set(key, cacheData, TimeSpan.FromMinutes(30));

            var appUrl = $"{Request.Scheme}://{Request.Host.Value}";

            // G·ª≠i email x√°c nh·∫≠n
            var confirmLink = $"{appUrl}/api/auth/confirm-email?email={model.Email}&token={token}";
            await emailSender.SendEmailAsync(model.Email, "X√°c nh·∫≠n t√†i kho·∫£n", $"<a href='{confirmLink}'>X√°c th·ª±c Email</a>");
            Console.WriteLine($"üìß Link x√°c nh·∫≠n email: {confirmLink}");

            return Ok(new { message = "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n." });
        }
        
        [Authorize]
        [HttpPost("logout")]
        public async Task<IActionResult> Logout([FromBody] TokenModel model)
        {
            try
            {
                // L·∫•y userId t·ª´ token
                var userId = User.FindFirst(ClaimTypes.Name)?.Value;
                if (string.IsNullOrEmpty(userId))
                {
                    Console.WriteLine("Kh√¥ng t√¨m th·∫•y userId trong token");
                    return Unauthorized(new { message = "Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c!" });
                }

                Console.WriteLine($"ƒêang ƒëƒÉng xu·∫•t: UserId={userId}, RefreshToken={model.RefreshToken}");

                // Ki·ªÉm tra model
                if (model == null || string.IsNullOrEmpty(model.RefreshToken))
                {
                    Console.WriteLine("RefreshToken kh√¥ng ƒë∆∞·ª£c g·ª≠i l√™n ho·∫∑c r·ªóng");
                    return BadRequest(new { message = "RefreshToken kh√¥ng ƒë∆∞·ª£c g·ª≠i l√™n" });
                }

                // X√≥a Refresh Token t·ª´ database
                var refreshToken = await _context.RefreshTokens
                    .FirstOrDefaultAsync(rt => rt.Token == model.RefreshToken && rt.UserId == userId);
                
                if (refreshToken != null)
                {
                    Console.WriteLine($"ƒê√£ t√¨m th·∫•y refresh token, ID={refreshToken.Id}");
                    _context.RefreshTokens.Remove(refreshToken);
                    await _context.SaveChangesAsync();
                    Console.WriteLine("ƒê√£ x√≥a refresh token th√†nh c√¥ng");
                }
                else
                {
                    // Th·ª≠ t√¨m token m√† kh√¥ng c·∫ßn kh·ªõp userId
                    var anyToken = await _context.RefreshTokens
                        .FirstOrDefaultAsync(rt => rt.Token == model.RefreshToken);
                        
                    if (anyToken != null)
                    {
                        Console.WriteLine($"T√¨m th·∫•y token nh∆∞ng kh√¥ng kh·ªõp userId. TokenUserId={anyToken.UserId}, CurrentUserId={userId}");
                    }
                    else
                    {
                        Console.WriteLine("Kh√¥ng t√¨m th·∫•y refresh token trong database");
                    }
                }

                return Ok(new { message = "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi ƒëƒÉng xu·∫•t: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return StatusCode(500, new { message = "L·ªói server khi ƒëƒÉng xu·∫•t" });
            }
        }

        
        // üîπ X√°c nh·∫≠n email
        [HttpGet("confirm-email")]
        public async Task<IActionResult> ConfirmEmail(string email, string token)
        {
            string key = $"pending_registration:{email}";
            var cacheData = _cache.Get<dynamic>(key);

            if (cacheData == null || cacheData.Token != token)
            {
                return BadRequest(new { message = "Li√™n k·∫øt x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
            }

            // T·∫°o t√†i kho·∫£n trong database
            var user = new User
            {
                UserName = email,
                Email = email,
                FullName = cacheData.FullName,
                EmailConfirmed = true
            };

            var result = await _userManager.CreateAsync(user, cacheData.Password);
            if (!result.Succeeded) 
                return BadRequest(result.Errors);

            // X√≥a d·ªØ li·ªáu t·∫°m kh·ªèi Redis
            _cache.Remove(key);

            return Ok(new { message = "X√°c th·ª±c email th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù." });
        }


        // üîπ ƒêƒÉng nh·∫≠p b·∫±ng email (ch·ªâ cho ph√©p n·∫øu email ƒë√£ x√°c nh·∫≠n)
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginModel model)
        {
            var user = await _userManager.FindByEmailAsync(model.Email);
            if (user == null)
                return Unauthorized(new { message = "Email kh√¥ng t·ªìn t·∫°i!" });

            if (!await _userManager.IsEmailConfirmedAsync(user))
                return Unauthorized(new { message = "B·∫°n c·∫ßn x√°c nh·∫≠n email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p!" });

            if (!await _userManager.CheckPasswordAsync(user, model.Password))
                return Unauthorized(new { message = "Sai m·∫≠t kh·∫©u!" });

            // T·∫°o Access Token
            var accessToken = GenerateJwtToken(user);

            // T·∫°o Refresh Token
            var refreshToken = GenerateRefreshToken();
            var refreshTokenEntity = new RefreshToken
            {
                Token = refreshToken,
                UserId = user.Id,
                ExpiryDate = DateTime.UtcNow.AddDays(7)
            };
            
            _context.RefreshTokens.Add(refreshTokenEntity);
            await _context.SaveChangesAsync();

            return Ok(new
            {
                message = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
                accessToken,
                refreshToken
            });
        }

        // üîπ ƒêƒÉng nh·∫≠p b·∫±ng Google
        [HttpPost("login-google")]
        public async Task<IActionResult> LoginWithGoogle([FromBody] GoogleLoginModel model)
        {
            var user = await _userManager.FindByEmailAsync(model.Email);
            if (user == null)
            {
                user = new User
                {
                    UserName = model.Email,
                    Email = model.Email,
                    FullName = model.FullName,
                    Avatar = model.Avatar,
                    IsGoogleAccount = true,
                    EmailConfirmed = true // Google kh√¥ng c·∫ßn x√°c th·ª±c email
                };
                await _userManager.CreateAsync(user);
            }

            // Tr·∫£ v·ªÅ JWT Token
            var token = GenerateJwtToken(user);
            return Ok(new { message = "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!", token });
        }

        // üîπ H√†m t·∫°o JWT Token
        private string GenerateJwtToken(User user)
        {
            var claims = new[]
            {
                new Claim(ClaimTypes.Name, user.Id),
                new Claim(ClaimTypes.Email, user.Email),
                new Claim("FullName", user.FullName),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddMinutes(Convert.ToDouble(_configuration["Jwt:ExpireMinutes"])),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
        
        private async Task<bool> IsValidEmailAsync(string email)
        {
            try
            {
                var emailHost = email.Split('@').Last();
                var lookup = new LookupClient();
                var result = await lookup.QueryAsync(emailHost, QueryType.MX);

                bool isValid = result.Answers.MxRecords().Any();
                Console.WriteLine($"üîç IsValidEmailAsync: {email} ‚Üí {isValid}");
                return isValid;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói ki·ªÉm tra MX Record: {ex.Message}");
                return false;
            }
        }
        

        [HttpPost("refresh-token")]
        public async Task<IActionResult> RefreshToken([FromBody] TokenModel model)
        {
            if (string.IsNullOrEmpty(model.RefreshToken))
                return BadRequest(new { message = "Refresh Token kh√¥ng h·ª£p l·ªá!" });

            // Ki·ªÉm tra Refresh Token trong database
            var refreshTokenEntity = await _context.RefreshTokens
                .FirstOrDefaultAsync(rt => rt.Token == model.RefreshToken && rt.ExpiryDate > DateTime.UtcNow);
        
            if (refreshTokenEntity == null)
                return Unauthorized(new { message = "Refresh Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });

            // L·∫•y th√¥ng tin user
            var user = await _userManager.FindByIdAsync(refreshTokenEntity.UserId);
            if (user == null)
                return Unauthorized(new { message = "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

            // T·∫°o Access Token m·ªõi
            var newAccessToken = GenerateJwtToken(user);

            return Ok(new
            {
                accessToken = newAccessToken,
                refreshToken = model.RefreshToken
            });
        }

        // H√†m t·∫°o Refresh Token
        private string GenerateRefreshToken()
        {
            var randomNumber = new byte[32];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(randomNumber);
            }
            return Convert.ToBase64String(randomNumber);
        }

        [HttpGet("check-token/{token}")]
        public async Task<IActionResult> CheckToken(string token)
        {
            var refreshToken = await _context.RefreshTokens
                .FirstOrDefaultAsync(rt => rt.Token == token);
            
            if (refreshToken == null)
                return NotFound(new { message = "Token kh√¥ng t·ªìn t·∫°i" });
            
            return Ok(new { 
                id = refreshToken.Id,
                userId = refreshToken.UserId,
                expiryDate = refreshToken.ExpiryDate
            });
        }

    }
}
